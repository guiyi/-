/*（1）SYSTEM
CONST的特例，当表上只有一条元组匹配

（2）CONST
WHERE条件筛选后表上至多有一条元组匹配时，比如WHERE ID = 2 （ID是主键，值为2的要么有一条要么没有）

（3）EQ_REF
参与连接运算的表是内表（在代码实现的算法中，两表连接时作为循环中的内循环遍历的对象，这样的表称为内表）。
基于索引（连接字段上存在唯一索引或者主键索引，且操作符必须是“=”谓词，索引值不能为NULL）做扫描，使得对外表的一条元组，内表只有唯一一条元组与之对应。

（4）REF
可以用于单表扫描或者连接。参与连接运算的表，是内表。
基于索引（连接字段上的索引是非唯一索引，操作符必须是“=”谓词，连接字段值不可为NULL）做扫描，使得对外表的一条元组，内表可有若干条元组与之对应。


（5）REF_OR_NULL
类似REF，只是搜索条件包括：连接字段的值可以为NULL的情况，比如 where col = 2 or col is null


（6）RANGE
范围扫描，基于索引做范围扫描，为诸如BETWEEN，IN，>=，LIKE类操作提供支持


（7）INDEX_SCAN
索引做扫描，是基于索引在索引的叶子节点上找满足条件的数据（不需要访问数据文件）

（8）ALL
全表扫描或者范围扫描：不使用索引，顺序扫描，直接读取表上的数据（访问数据文件）


（9）UNIQUE_SUBQUERY
在子查询中，基于唯一索引进行扫描，类似于EQ_REF


（10）INDEX_SUBQUERY
在子查询中，基于除唯一索引之外的索引进行扫描

（11）INDEX_MERGE
多重范围扫描。两表连接的每个表的连接字段上均有索引存在且索引有序，结果合并在一起。适用于作集合的并、交操作。

（12）FT
FULL TEXT，全文检索

system > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL
*/

#主索引
EXPLAIN SELECT
	*
FROM
	ecs_users
WHERE
	user_id = 805430

# 1	SIMPLE	ecs_users	const	PRIMARY	PRIMARY	3	const	1	


#主索引
EXPLAIN SELECT
	*
FROM
	ecs_users
WHERE
	email = "274340311@qq.com" and is_special=0
	#email like "%274340311@qq.com%" and is_special=0
	#email like "274340311@qq.com"
# 1	SIMPLE	ecs_users	ref	email	email	182	const	1	Using where
# 1	SIMPLE	ecs_users	ALL					8	Using where
# 1	SIMPLE	ecs_users	range	email	email	182		1	Using where


EXPLAIN SELECT
	*
FROM
	ecs_users
WHERE
	user_id  between  805430 and 805433

# 1	SIMPLE	ecs_users	range	PRIMARY	PRIMARY	3		3	Using where


EXPLAIN SELECT
	*
FROM
	ecs_users
WHERE
	user_id  in  (805430, 805433) and is_special=0
# 1	SIMPLE	ecs_users	range	PRIMARY	PRIMARY	3		2	Using where










CREATE TABLE `award` (
   `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '用户id',
   `aty_id` varchar(100) NOT NULL DEFAULT '' COMMENT '活动场景id',
   `nickname` varchar(12) NOT NULL DEFAULT '' COMMENT '用户昵称',
   `is_awarded` tinyint(1) NOT NULL DEFAULT 0 COMMENT '用户是否领奖',
   `award_time` int(11) NOT NULL DEFAULT 0 COMMENT '领奖时间',
   `account` varchar(12) NOT NULL DEFAULT '' COMMENT '帐号',
   `password` char(32) NOT NULL DEFAULT '' COMMENT '密码',
   `message` varchar(255) NOT NULL DEFAULT '' COMMENT '获奖信息',
   `created_time` int(11) NOT NULL DEFAULT 0 COMMENT '创建时间',
   `updated_time` int(11) NOT NULL DEFAULT 0 COMMENT '更新时间',
   PRIMARY KEY (`id`)
 ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT='获奖信息表';

DESC award;


CREATE TABLE `award` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '用户id',
  `aty_id` varchar(100) NOT NULL DEFAULT '' COMMENT '活动场景id',
  `nickname` varchar(12) NOT NULL DEFAULT '' COMMENT '用户昵称',
  `is_awarded` tinyint(1) NOT NULL DEFAULT '0' COMMENT '用户是否领奖',
  `award_time` int(11) NOT NULL DEFAULT '0' COMMENT '领奖时间',
  `account` varchar(12) NOT NULL DEFAULT '' COMMENT '帐号',
  `password` char(32) NOT NULL DEFAULT '' COMMENT '密码',
  `message` varchar(255) NOT NULL DEFAULT '' COMMENT '获奖信息',
  `created_time` int(11) NOT NULL DEFAULT '0' COMMENT '创建时间',
  `updated_time` int(11) NOT NULL DEFAULT '0' COMMENT '更新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `account_UNIQUE_Index` (`account`),
  KEY `nickname_account_createdTime_Index` (`nickname`,`account`,`created_time`),
  KEY `account_Index` (`account`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='获奖信息表';



/*mysql的索引分为单列索引(主键索引,唯索引,普通索引)和组合索引.

单列索引:一个索引只包含一个列,一个表可以有多个单列索引.

组合索引:一个组合索引包含两个或两个以上的列,*/

#1-1)    普通索引,这个是最基本的索引,
CREATE INDEX account_Index ON `award`(`account`);
ALTER TABLE award ADD INDEX account_Index(`account`)

#1-2)    唯一索引,与普通索引类似,但是不同的是唯一索引要求所有的类的值是唯一的,这一点和主键索引一样.但是他允许有空值,
CREATE UNIQUE INDEX account_UNIQUE_Index ON `award`(`account`);

#1-3)    主键索引,不允许有空值,(在B+TREE中的InnoDB引擎中,主键索引起到了至关重要的地位)
#主键索引建立的规则是 int优于varchar,一般在建表的时候创建,最好是与表的其他字段不相关的列或者是业务不相关的列.一般会设为 int 而且是 AUTO_INCREMENT自增类型的

#组合索引
CREATE INDEX nickname_account_createdTime_Index ON `award`(`nickname`, `account`, `created_time`);


#删除索引
DROP INDEX account_Index ON `award`
ALTER TABLE award   DROP INDEX account_UNIQUE_Index


explain select * from  award where nickname='daidai' and account=100 and created_time=2017
# 1	SIMPLE	award	ref	account_UNIQUE_Index,nickname_account_createdTime_Index,account_Index	nickname_account_createdTime_Index	38	const	1	Using where

explain select * from  award where nickname='daidai' 
# 1	SIMPLE	award	ref	nickname_account_createdTime_Index	nickname_account_createdTime_Index	38	const	1	Using where

explain select * from  award where nickname='daidai' and account=100
# 1	SIMPLE	award	ref	account_UNIQUE_Index,nickname_account_createdTime_Index,account_Index	nickname_account_createdTime_Index	38	const	1	Using where

explain select * from  award where nickname='daidai' and created_time=2017
# 1	SIMPLE	award	ref	nickname_account_createdTime_Index	nickname_account_createdTime_Index	38	const	1	Using where

##最左前缀原则
explain select * from  award where account=100 and created_time=2017
# 1	SIMPLE	award	ALL	account_UNIQUE_Index,account_Index				2	Using where

explain select * from  award where  created_time=2017
# 1	SIMPLE	award	ALL					2	Using where
